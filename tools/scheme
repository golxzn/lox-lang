program       -> declaration* EOF;

declaration   -> storage_decl
               | statement;

storage_decl  -> constant_decl
               | variable_decl

constant_decl -> "const" IDENTIFIER (":" TYPE)* "{" expression "}" ";"
              -> "const" IDENTIFIER ":" TYPE "{" expression* "}" ";";

variable_decl -> "var" IDENTIFIER (":" TYPE)* "{" expression "}" ";"
              -> "var" IDENTIFIER ":" TYPE "{" expression* "}" ";";

statement     -> branch_stmt
               | print_stmt // DEBUG BUILD ONLY
               | loop_stmt
               | for_loop_stmt
               | scope_stmt
               | expression;

branch_stmt   -> "if" "(" ( declaration )* expression ")" scope_stmt
                ( "else" scope_stmt );
print_stmt    -> "print" expression ";";
loop_stmt     -> "while" "(" ( declaration )* expression ")" scope_stmt;
for_loop_stmt -> "for" "(" ( declaration | expression | ";" ) expression? ";" expression? ")" scope_stmt;
scope_stmt    -> "{" declaration* "}";

expression    -> assignment;

assignment    -> ( "++" | "--" ) IDENTIFIER
               | IDENTIFIER ( "=" | "-=" | "+=" | "*=" | "/=" ) assignment
               | logical_or;
logical_or    -> logical_and ( "or" logical_and )*;
logical_and   -> equality ( "and" equality )*;
equality      -> comparison ( ( "!=" | "==" ) comparison )*;
comparison    -> term ( ( "<=" | ">=" | "<" | ">" ) term )*;
term          -> factor ( ( "+" | "-" ) factor )*;
factor        -> unary ( ( "*" | "/" ) unary )*;

unary         -> ( "!" | "-" | "+" ) unary | primary;
primary       -> "true" | "false" | "null"
               | NUMBER | STRING | IDENTIFIER
               | "(" expression ")";


NUMBER        -> DIGIT+ ( "." DIGIT+ )? ;
STRING        -> "\"" <any char except "\"">* "\"" ;
IDENTIFIER    -> ALPHA ( ALPHA | DIGIT )* ;
ALPHA         -> "a" ... "z" | "A" ... "Z" | "_" ;
DIGIT         -> "0" ... "9" ;
